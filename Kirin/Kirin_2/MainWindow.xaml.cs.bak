using Kirin_2.Pages;
using Kirin_2.UserControls;
using Kirin_2.ViewModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;

namespace Kirin_2
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        public DataTable subsection_menuList;
        public List<string> TreeView_NonClickable_menuitems = new List<string>() {
            "Users", "Grade Center", "Attendance", "Predictiveanalysis", "Finicalmapping","Assessments"
        };
        public DataSet ds;
        public App app;
        //string userName = App.Current.Properties["USERNAME"].ToString();
        string userName = string.Empty;
        public MainWindow()
        {
            app = (App)Application.Current;
            app.Properties["USERNAME"] = "dduke@sabc.on.ca";
            userName = App.Current.Properties["USERNAME"].ToString(); //For Dev Perpose

            this.DataContext = new MainWindowVM(userName);
            InitializeComponent();
            var vm = (MainWindowVM)this.DataContext;

            subsection_menuList = new DataTable("MenuList");
            subsection_menuList.Columns.Add("id", typeof(int));
            subsection_menuList.Columns.Add("ParentId", typeof(int));
            subsection_menuList.Columns.Add("Header");
            subsection_menuList.Columns.Add("Label");
            subsection_menuList.Columns.Add("Tag");

            subsection_menuList.Rows.Add(1, null, "Analytics", "Dashboard", "Dashboard");
            subsection_menuList.Rows.Add(2, null, "Analytics", "Sandbox", "Datasandbox");
            //subsection_menuList.Rows.Add(30, null, "Analytics", "Reference", "Datasandbox_Reference"); 
            subsection_menuList.Rows.Add(3, null, "Analytics", "Users", "Users");
            subsection_menuList.Rows.Add(4, 3, "Analytics", "SB Database", "SchoolDB");
            subsection_menuList.Rows.Add(25, 3, "Analytics", "School Directory", "StaffDirectory");
            subsection_menuList.Rows.Add(9, 3, "Analytics", "Class Directory", "Classes");
            //subsection_menuList.Rows.Add(5, null, "Analytics", "Sample", "Sample");
            subsection_menuList.Rows.Add(12, null, "Planner", "Register", "Gradebook");
            subsection_menuList.Rows.Add(7, 12, "Planner", "Attendance", "AttendancePage");
            subsection_menuList.Rows.Add(5, 12, "Planner", "Alerts", "Alerts");
            subsection_menuList.Rows.Add(6, null, "Planner", "Grade Center", "Gradebook");
            subsection_menuList.Rows.Add(8, 6, "Planner", "Class Calendar", "Classcalendar");
            //subsection_menuList.Rows.Add(5, null, "Analytics", "Insight", "DashboardInsights");

            subsection_menuList.Rows.Add(10, 6, "Planner", "Scoresheet", "ScoreSheet");
            subsection_menuList.Rows.Add(11, 6, "Planner", "Assignment", "AssignmentMaker");
            //subsection_menuList.Rows.Add(12, 7, "Planner", "MultidayAttendance" , "ClassMultiDayAttendance_New");
            //subsection_menuList.Rows.Add(11, 7, "Planner", "Attendance 1" , "AttendancePage");
            //subsection_menuList.Rows.Add(12, 7, "Planner", "Attendance 2", "Attendance2");

            //subsection_menuList.Rows.Add(13, null, "Machinelearning", "Predictive Analysis", "Predictiveanalysis");
            //subsection_menuList.Rows.Add(14, null, "Machinelearning", "ML Dashboard", "MLDashboard");
            //subsection_menuList.Rows.Add(15, null, "Machinelearning", "ML Sandbox", "MLSandbox");
            //subsection_menuList.Rows.Add(16, 13, "Machinelearning", "Analysis 1", "Analysis1");
            //subsection_menuList.Rows.Add(17, 13, "Machinelearning", "Analysis 2", "Analysis2");
            subsection_menuList.Rows.Add(18, null, "Resourcemanagement", "Financial Planning", "MappingSV");
            subsection_menuList.Rows.Add(19, null, "Resourcemanagement", "Flow Charts", "Assessments");
            subsection_menuList.Rows.Add(20, 18, "Resourcemanagement", "Budgeting", "MappingSV");
            subsection_menuList.Rows.Add(27, 18, "Resourcemanagement", "Spreadsheet", "ExcelPage");
            //subsection_menuList.Rows.Add(21, 18, "Resourcemanagement", "Tabular View", "TabularFinancialView");
            //subsection_menuList.Rows.Add(21, 18, "Resourcemanagement", "Child View", "Mapping1_ChildView");

            //subsection_menuList.Rows.Add(21, 18, "Resourcemanagement", "Map 2", "Mapping2");
            //subsection_menuList.Rows.Add(22, 19, "Resourcemanagement", "Hierarchial Flow", "Assessment1");
            subsection_menuList.Rows.Add(22, 19, "Resourcemanagement", "Hierarchial Flow", "HierarchicalView");
            subsection_menuList.Rows.Add(23, 19, "Resourcemanagement", "Organizational Structure", "OrganizationChart");
            subsection_menuList.Rows.Add(26, 19, "Resourcemanagement", "Flowchart Sandbox", "FinancialMapSandbox");
            //subsection_menuList.Rows.Add(24, 19, "Resourcemanagement", "Sandbox", "ResourcesSandbox");


            //Use a DataSet to manage the data
            ds = new DataSet();
            ds.Tables.Add(subsection_menuList);

            //add a relationship
            ds.Relations.Add("rsParentChild", ds.Tables["MenuList"].Columns["id"], ds.Tables["MenuList"].Columns["ParentId"]);
            PopulateTreeRoot("Analytics");

            app.classSelector = new UC_ClassSelector();
            app.addAlerts = new UC_AddAlerts();
            app.staffProfileModal.Visibility = Visibility.Collapsed;
            app.attendanceComment.Visibility = Visibility.Collapsed;
            app.studentProfileModal.Visibility = Visibility.Collapsed;
            app.classSelector.Visibility = Visibility.Collapsed;
            app.viewBulletin.Visibility = Visibility.Collapsed;
            app.addColumn.Visibility = Visibility.Collapsed;
            app.contextmenu.Visibility = Visibility.Collapsed;
            app.addAssignment.Visibility = Visibility.Collapsed;
            app.attendanceComment.Visibility = Visibility.Collapsed;
            app.score_LearningSkills.Visibility = Visibility.Collapsed;
            app.studentViewforPieChart.Visibility = Visibility.Collapsed;
            app.studentViewforScatter.Visibility = Visibility.Collapsed;
            app.citizenshipView.Visibility = Visibility.Collapsed;
            app.attendaceCodeView.Visibility = Visibility.Collapsed;
            app.ethnicityView.Visibility = Visibility.Collapsed;
            app.addAlerts.Visibility = Visibility.Collapsed;
            app.citizenshipBar.Visibility = Visibility.Collapsed;
            app.transferStdBar.Visibility = Visibility.Collapsed;
            app.dobBar.Visibility = Visibility.Collapsed;
            app.dobPie.Visibility = Visibility.Collapsed;
            app.sportsPie.Visibility = Visibility.Collapsed;
            app.sportsBar.Visibility = Visibility.Collapsed;
            app.sportsAttendance.Visibility = Visibility.Collapsed;
            app.clubjoined.Visibility = Visibility.Collapsed;
            app.diversityBar.Visibility = Visibility.Collapsed;
            app.diversityPie.Visibility = Visibility.Collapsed;
            app.languageBar.Visibility = Visibility.Collapsed;
            app.deleteAssignment.Visibility = Visibility.Collapsed;
            app.tsStackedBar.Visibility = Visibility.Collapsed;
            app.fusionCalender.Visibility = Visibility.Collapsed;
            app.singleDay.Visibility = Visibility.Collapsed;
            app.svMapView.Visibility = Visibility.Collapsed;
            app.transportAbvr.Visibility = Visibility.Collapsed;
            app.subjectListView.Visibility = Visibility.Collapsed;
            app.insightFeedback.Visibility = Visibility.Collapsed;
            app.assignmentList.Visibility = Visibility.Collapsed;
            app.sportsList.Visibility = Visibility.Collapsed;
            app.languageList.Visibility = Visibility.Collapsed;
            app.scatterLegend.Visibility = Visibility.Collapsed; 

            MainWindowGrid.Children.Add(app.staffProfileModal);
            MainWindowGrid.Children.Add(app.studentProfileModal);
            MainWindowGrid.Children.Add(app.classSelector);
            MainWindowGrid.Children.Add(app.viewBulletin);
            MainWindowGrid.Children.Add(app.addColumn);
            MainWindowGrid.Children.Add(app.contextmenu);
            MainWindowGrid.Children.Add(app.addAssignment);
            MainWindowGrid.Children.Add(app.attendanceComment);
            MainWindowGrid.Children.Add(app.score_LearningSkills);
            MainWindowGrid.Children.Add(app.studentViewforPieChart);
            MainWindowGrid.Children.Add(app.studentViewforScatter);
            MainWindowGrid.Children.Add(app.citizenshipView);
            MainWindowGrid.Children.Add(app.attendaceCodeView);
            MainWindowGrid.Children.Add(app.ethnicityView);
            MainWindowGrid.Children.Add(app.addAlerts);
            MainWindowGrid.Children.Add(app.citizenshipBar);
            MainWindowGrid.Children.Add(app.transferStdBar);
            MainWindowGrid.Children.Add(app.dobBar);
            MainWindowGrid.Children.Add(app.dobPie);
            MainWindowGrid.Children.Add(app.sportsPie);
            MainWindowGrid.Children.Add(app.sportsBar);
            MainWindowGrid.Children.Add(app.sportsAttendance);
            MainWindowGrid.Children.Add(app.clubjoined);
            MainWindowGrid.Children.Add(app.diversityBar);
            MainWindowGrid.Children.Add(app.diversityPie);
            MainWindowGrid.Children.Add(app.languageBar);
            MainWindowGrid.Children.Add(app.deleteAssignment);
            MainWindowGrid.Children.Add(app.tsStackedBar);
            MainWindowGrid.Children.Add(app.fusionCalender);
            MainWindowGrid.Children.Add(app.singleDay);
            MainWindowGrid.Children.Add(app.svMapView);
            MainWindowGrid.Children.Add(app.transportAbvr);
            MainWindowGrid.Children.Add(app.subjectListView);
            MainWindowGrid.Children.Add(app.insightFeedback);
            MainWindowGrid.Children.Add(app.assignmentList);
            MainWindowGrid.Children.Add(app.sportsList);
            MainWindowGrid.Children.Add(app.languageList);
            MainWindowGrid.Children.Add(app.scatterLegend);

            Storyboard sb = this.FindResource("OpenMenuSSPnl_nonFlick") as Storyboard;
            sb.Begin();
            foreach (Window window in Application.Current.Windows)
            {
                if (window.GetType() == typeof(MainWindow))
                {
                    //  NavigationService.Navigate(new Uri(string.Format("{0}{1}", "Pages/", "ScoreSheet_StudentView.xaml?ID=" + (sender as Button).Tag), UriKind.RelativeOrAbsolute));
                    MainWindowFrame.Navigate(new Dashboard());
                    // (window as MainWindow).MainWindowFrame.Navigate(new Uri(string.Format("{0}{1}{2}", "Pages/", "ScoreSheet_StudentView?ID="+(sender as Button).Tag, ".xaml"), UriKind.RelativeOrAbsolute));
                }
            }
        }

        public void PopulateTreeRoot(string selectedMenuItem)
        {
            string strFilter = "Header = '" + selectedMenuItem + "'";
            DataRow[] filteredSubmenuList;
            filteredSubmenuList = ds.Tables["MenuList"].Select(strFilter);

            subsection_tv.Items.Clear();
            foreach (DataRow dr in filteredSubmenuList)
            {
                if (dr["ParentId"] == DBNull.Value)
                {
                    TreeViewItem root = new TreeViewItem();
                    // root.MouseEnter += new MouseEventHandler(this.subsection_tv_MouseEnter); 
                    root.Header = dr["Label"].ToString();
                    root.Tag = dr["Tag"].ToString();
                    subsection_tv.Items.Add(root);

                    PopulateTree(dr, root);
                }
            }
            subsection_tv.AddHandler(TreeViewItem.SelectedEvent, new RoutedEventHandler(TvItemSelect));
        }

        private void Print_Click(object sender, RoutedEventArgs e)
        {
            ViewModel.PrintPreview.Print_WPF_Preview(MainWindowFrame);
        }

        public void PopulateTree(DataRow dr, TreeViewItem pNode)
        {
            foreach (DataRow row in dr.GetChildRows("rsParentChild"))
            {
                TreeViewItem cChild = new TreeViewItem();

                cChild.Header = row["Label"].ToString();
                cChild.Tag = row["Tag"].ToString();
                pNode.Items.Add(cChild);

                //Recursively build the tree
                PopulateTree(row, cChild);
            }
        }

        private void TvItemSelect(object sender, RoutedEventArgs e)
        {
            TreeViewItem item = e.Source as TreeViewItem;
            Storyboard sb = this.FindResource("OpenMenuSSPnl_nonFlick") as Storyboard;
            sb.Begin();
            if (!TreeView_NonClickable_menuitems.Contains(item.Tag))
            {
                this.SwitchScreen(item.Tag as String);
            }
        }

        private void ButtonExit_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void subsection_flyinbtn_Click(object sender, RoutedEventArgs e)
        {
            subsection_flyinbtn.Visibility = Visibility.Collapsed;
            subsection_flyoutbtn.Visibility = Visibility.Visible;
        }

        private void subsection_flyoutbtn_Click(object sender, RoutedEventArgs e)
        {
            subsection_flyinbtn.Visibility = Visibility.Visible;
            subsection_flyoutbtn.Visibility = Visibility.Collapsed;
        }

        internal void SwitchScreen(string page)
        {
            // Open Subsection menu panel
            Storyboard sb = this.FindResource("OpenMenuSSPnl_nonFlick") as Storyboard;
            sb.Begin();
            try
            {
                foreach (Window window in Application.Current.Windows)
                {
                    if (page != null)
                    {
                        if (window.GetType() == typeof(MainWindow))
                        {
                            (window as MainWindow).MainWindowFrame.Navigate(new Uri(string.Format("{0}{1}{2}", "Pages/", page, ".xaml"), UriKind.RelativeOrAbsolute));
                        }
                    }
                    else
                    {
                        MainWindowFrame.Navigate(new Uri(string.Format("{0}{1}{2}", "Pages/", "TBD", ".xaml"), UriKind.RelativeOrAbsolute));
                    }
                }
            }
            catch (Exception)
            {
                MainWindowFrame.Navigate(new Uri(string.Format("{0}{1}{2}", "Pages/", "TBD", ".xaml"), UriKind.RelativeOrAbsolute));
            }
        }

        private void TreeViewItem_MouseButtonUp(object sender, MouseButtonEventArgs e)
        {
            var sel = e.Source as TreeViewItem;
            if (sel != null)
            {
                String _tag = sel.Tag as String;
                this.SwitchScreen(_tag);
            }

            subsection_flyinbtn.Visibility = Visibility.Visible;
            subsection_flyoutbtn.Visibility = Visibility.Collapsed;
        }

        private void Tg_Btn_Unchecked(object sender, RoutedEventArgs e)
        {
            // img_bg.Opacity = 1;
        }

        private void Tg_Btn_Checked(object sender, RoutedEventArgs e)
        {
            //img_bg.Opacity = 0.3;
        }

        private void CloseBtn_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void Close_Click(object sender, RoutedEventArgs e)
        {
            HelpPopup.Visibility = Visibility.Collapsed;
        }

        private void Browse_Click(object sender, RoutedEventArgs e)
        {
            
        }

        private void HelpSearchBox_TextChanged(object sender, TextChangedEventArgs e)
        {
          
        }

        private void ListViewItem_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            var item = sender as ListViewItem;
            String _tag;

            subsection_flyinbtn.Visibility = Visibility.Visible;
            subsection_flyoutbtn.Visibility = Visibility.Collapsed;

            if (item != null)
            {
                _tag = item.Tag as String;
                //navigate frame to selected Page

                switch (_tag)
                {
                    case "Analytics":
                        {
                            this.SwitchScreen("Dashboard");
                            break;
                        }
                    case "Planner":
                        {
                            this.SwitchScreen("AttendancePage");
                            break;
                        }
                    //case "Machinelearning":
                    //    {
                    //        this.SwitchScreen("MLSandbox");
                    //        break;
                    //    }
                    case "ResourceManagement":
                        {
                            this.SwitchScreen("MappingSV");
                            break;
                        }
                    case "Settings":
                        {
                            //  Storyboard sbCloseMenuSSPnl = this.FindResource("CloseMenuSSPnl") as Storyboard;
                            //   sbCloseMenuSSPnl.Begin();
                            break;
                        }
                    default:
                        break;

                }


                // this.SwitchScreen(_tag);

                //Repopulate subsection list according to selected Side Menu Item
                PopulateTreeRoot(_tag);

                if (_tag == "Settings")
                {
                    this.SwitchScreen(_tag);
                    Storyboard sbCloseMenuSSPnl = this.FindResource("CloseMenuSSPnl") as Storyboard;
                    sbCloseMenuSSPnl.Begin();
                }
                else
                {
                    // Open Subsection menu panel
                    Storyboard sb = this.FindResource("OpenMenuSSPnl") as Storyboard;
                    sb.Begin();

                    //close TPanel 
                    Storyboard sbCloseTPanel = this.FindResource("CloseMenu") as Storyboard;
                    sbCloseTPanel.Begin();
                }

                //  subsection_tv.ItemsSource = new DataView(subsection_menuList);
            }
        }

        protected override void OnMouseLeftButtonDown(MouseButtonEventArgs e)
        {
            base.OnMouseLeftButtonDown(e);

            // Begin dragging the window
            this.DragMove();
        }

        private void Image_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            this.SwitchScreen("Dashboard");
            AnalyticsLVItem.IsSelected = true;
            PlannerLVItem.IsSelected = false;
            //MLLVItem.IsSelected = false;
            RMLVItem.IsSelected = false;
            SettingsListViewItem.IsSelected = false;
            PopulateTreeRoot("Analytics");

            if (subsection_tv.Items.Count > 0)
            {
                for (int i = 0; i < subsection_tv.Items.Count; i++)
                {
                    if (i == 0)
                    {
                        TreeViewItem childNode = subsection_tv.ItemContainerGenerator
                            .ContainerFromItem(subsection_tv.Items[i]) as TreeViewItem;

                        childNode.IsSelected = true;

                    }
                }
            }
        }

        private void View_DailyBulletin(object sender, RoutedEventArgs e)
        {
            //DailyBulletin dbwin = new DailyBulletin();
            //dbwin.Show();

            ((App)Application.Current).viewBulletin.Visibility = Visibility.Visible;
        }

        private void BackButton_Click(object sender, RoutedEventArgs e)
        {
            if (MainWindowFrame.NavigationService.CanGoBack)
            {
                MainWindowFrame.NavigationService.GoBack();
            }
        }

        private void ForwardButton_Click(object sender, RoutedEventArgs e)
        {
            if (MainWindowFrame.NavigationService.CanGoForward)
            {
                MainWindowFrame.NavigationService.GoForward();
            }
        }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            var ah = ActualHeight;
            var aw = ActualWidth;
            var h = Height;
            var w = Width;

            SettingsListViewItem.Margin = new Thickness(5, ah / 2, 0, 0);

            MainWindowFrame.Height = ah - 100;
            MainWindowFrame.Width = Wrapper.ActualWidth - subsection_pnl.Width;
            subsection_pnl.Height = MainWindowGrid.ActualHeight - MainWindowHeader.ActualHeight;
            app.MainFrameWidth = MainWindowFrame.Width;
        }

        private void Window_StateChanged(object sender, EventArgs e)
        {
            switch (this.WindowState)
            {
                case WindowState.Maximized:
                    {
                        var ah = ActualHeight;
                        var aw = ActualWidth;
                        var h = Height;
                        var w = Width;

                        SettingsListViewItem.Margin = new Thickness(0, ah - 320, 0, 0);

                        MainWindowFrame.Height = ah - 100;
                        MainWindowFrame.Width = Wrapper.ActualWidth - subsection_pnl.Width;
                        subsection_pnl.Height = MainWindowGrid.ActualHeight - MainWindowHeader.ActualHeight;
                        app.MainFrameWidth = MainWindowFrame.Width;
                        break;
                    }
            }
        }

        private void Storyboard_OpenMenuSSPnl_CurrentStateInvalidated(object sender, EventArgs e)
        {
            //Console.WriteLine(MainWindowFrame.ActualWidth);
            var ah = ActualHeight;
            var aw = ActualWidth;
            //  MainWindowFrame.Width = aw -225;
            MainWindowFrame.Width = Wrapper.ActualWidth - subsection_pnl.ActualWidth;
            subsection_pnl.Height = MainWindowGrid.ActualHeight - MainWindowHeader.ActualHeight;
            app.MainFrameWidth = MainWindowFrame.Width;
        }

        private void Storyboard_CloseMenuSSPnl_CurrentStateInvalidated(object sender, EventArgs e)
        {
            var ah = ActualHeight;
            var aw = ActualWidth;
            //MainWindowFrame.Width = Wrapper.ActualWidth;
            MainWindowFrame.Width = Wrapper.ActualWidth - subsection_pnl.ActualWidth;
            subsection_pnl.Height = MainWindowGrid.ActualHeight - MainWindowHeader.ActualHeight;
            // FrameCol.Width = aw - 200;
            // FrameCol.Width =  new GridLength(aw - 225, GridUnitType.Pixel);
            app.MainFrameWidth = MainWindowFrame.Width;
        }

        private void Classes_MainCmb_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            app.chkBoxLst.Clear();
            GradeBookViewModel gbvm = new GradeBookViewModel();
            gbvm.cDisplayColumns.Execute(app.chkBoxLst);


            this.SwitchScreen("Dashboard");
            AnalyticsLVItem.IsSelected = true;
            PlannerLVItem.IsSelected = false;
            //MLLVItem.IsSelected = false;
            RMLVItem.IsSelected = false;
            SettingsListViewItem.IsSelected = false;

            this.Loaded += (s, args) =>
            {
                PopulateTreeRoot("Analytics");

            };

            if (subsection_tv.Items.Count > 0)
            {
                for (int i = 0; i < subsection_tv.Items.Count; i++)
                {
                    if (i == 0)
                    {
                        TreeViewItem childNode = subsection_tv.ItemContainerGenerator
              .ContainerFromItem(subsection_tv.Items[i]) as TreeViewItem;

                        childNode.IsSelected = true;

                    }
                }
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            app.Properties["USERNAME"] = userName;
            app.classSelector.Visibility = Visibility.Visible;
            //ShowUserControl1().Begin();
        }

        private Storyboard ShowUserControl1()
        {           
            app.classSelector.RenderTransform = new TranslateTransform();

            // Root is your root container. In this case - Grid
            // and you have to add it only in the case if it does not exists

            Storyboard sb = new Storyboard();

            DoubleAnimation slidey = new DoubleAnimation();
            slidey.To = 100;
            slidey.From = 0;
            slidey.Duration = new Duration(TimeSpan.FromMilliseconds(400));

            ScaleTransform scaleTransform = new ScaleTransform()
            {
                CenterX = 0,
                CenterY = 0,
                ScaleX = 400,
                ScaleY = 300
            };

            // Set the target of the animation
            Storyboard.SetTarget(slidey, app.classSelector);
            Storyboard.SetTargetProperty(slidey, new PropertyPath("RenderTransform.(TranslateTransform.Y)"));


            // Kick the animation off
            sb.Children.Add(slidey);

            return sb;
        }

        private void ShowContextMenu(object sender, RoutedEventArgs e)
        {
            app.contextmenu.Visibility = Visibility.Visible;
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            MainWindowFrame.Width = Wrapper.ActualWidth - subsection_pnl.ActualWidth;
            subsection_pnl.Height = MainWindowGrid.ActualHeight - MainWindowHeader.ActualHeight;
            app.MainFrameWidth = MainWindowFrame.Width;
        }

        private void subsection_tv_MouseEnter(object sender, MouseEventArgs e)
        {
            //    TreeViewItem t = (TreeViewItem)sender; 
            //    t.Foreground = (SolidColorBrush)(new BrushConverter().ConvertFrom("RED"));
            //    t.Background = (SolidColorBrush)(new BrushConverter().ConvertFrom("RED"));
            //e.Handled = false;
        }

        private void MouseWheelHandler(object sender, MouseWheelEventArgs e)
        {
            // If the mouse wheel delta is positive, move the box up.
            if (e.Delta > 0)
            {
                MainWindowHeader.Visibility = Visibility.Visible;
                rowToHide.Height = new GridLength(53, GridUnitType.Star);
            }
            // If the mouse wheel delta is negative, move the box down.
            if (e.Delta < 0)
            {
                MainWindowHeader.Visibility = Visibility.Collapsed;
                MainWindowHeader.Background = Brushes.Transparent;
                rowToHide.Height = new GridLength(0);
            }
        }

    }
}
